#+TITLE:       Parsing Story Data
#+AUTHOR:      Ashlynn Anderson
#+EMAIL:       ashlynn@pea.sh
#+DATE:        2020-01-05
#+LANGUAGE:    en

 | Status: | Complete |

* Introduction

When publishing, Twine publishes the story data (including passages,
name, tags, CSS, custom javascript, etc) directly into your exported
HTML file. It does this using the custom HTML elements
~<tw-storydata>~, ~<tw-tag>~, and ~<tw-passagedata>~ (as well as a
normal ~<script>~ and ~<style>~ tag, for custom javascript and CSS
respectively).

This chapter will go over the structure of these custom elements.

* A real world example

Created by opening up the twine editor and creating a new project with
some minor modifications then extracting the ~<tw-storydata>~ element
from the exported HTML.

#+BEGIN_SRC html
<tw-storydata 
  name="test"
  startnode="1"
  creator="Twine"
  creator-version="2.3.5"
  ifid="A580D8E9-E1BF-4C8E-A490-8D46170010B9"
  zoom="1"
  format="SugarCube"
  format-version="1.0.35"
  options=""
  hidden
>

    <!-- Custom Stylesheet -->
    <style
      role="stylesheet"
      id="twine-user-stylesheet"
      type="text/twine-css"
    ></style>
    
    <!-- Custom Javascript -->
    <script 
      role="script"
      id="twine-user-script"
      type="text/twine-javascript"
    ></script>
    
    <!-- Tag -->
    <tw-tag
      name="test-tag"
      color="red"
    ></tw-tag>

    <!-- Passage -->
    <tw-passagedata 
      pid="1"
      name="Untitled Passage"
      tags="test-tag test-tag-2"
      position="420.5,287.5"
      size="100,100"
    >
        Double-click this passage to edit it.
    </tw-passagedata>

</tw-storydata>
#+END_SRC

* Structure of the custom elements

 + ~<tw-storydata>~
   | name            | the name of the fiction                   |
   | startnode       | the id of the start node                  |
   | creator         | editor that was used to publish the story |
   | creator-version | editor's version                          |
   | ifid            | unique "interactive fiction ID" for IFDB  |
   | zoom            | stored editor zoom data                   |
   | format          | story format name                         |
   | format-version  | story format version                      |
   | options         |                                           |

   - content
     + A ~<style>~ element containing the story's custom CSS with the
       attributes:
       | role | "stylesheet"            |
       | id   | "twine-user-stylesheet" |
       | type | "text/twine-css"        |
     + a ~<script>~ element containing the story's custom javascript with
       the attributes:
       | role | "script"                |
       | id   | "twine-user-script"     |
       | type | "text/twine-javascript" |
     + many ~<tw-tag>~ elements, one for each of the story's tags
     + many ~<tw-passagedata>~ elements, one for each of the story's
       passages 

 + ~<tw-tag>~
   | name  | the name of the tag  |
   | color | the color of the tag |

   - notes
     + only created if the tag has a color set

 + ~<tw-passagedata>~
   | pid      | each passage is exported with a unique, sequential numeric id |
   | name     | the name of the passage                                       |
   | tags     | a list of tags for the passage, separated by spaces           |
   | position | editor metadata                                               |
   | size     | editor metadata                                               |

   - content
     + The unmodified text of the passage.

* A note on parsing passage text

Astute readers may notice that the ~<tw-passagedata>~ element contains
the "unmodified" text of the passage. What this indicates is that the
text is completely unparsed, unformatted, etc.

Indeed the editor does no processing of the passage text before
exporting the data, which means that it is up to you, the author of
the story format, to parse the passage text before displaying it. For
a drag and drop solution there are a number of [[https://marked.js.org][markdown]] [[http://showdownjs.com/][parsers]]
[[https://markdown-it.github.io/][available]], but you can also roll your own parser if desired.

(note that you will have to handle the link-to-passage logic for the
markdown parsers I've linked yourself)
